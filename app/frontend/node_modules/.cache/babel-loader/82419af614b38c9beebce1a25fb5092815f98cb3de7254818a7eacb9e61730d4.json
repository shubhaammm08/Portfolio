{"ast":null,"code":"\"use client\";\n\n// src/dialog.tsx\nimport * as React from \"react\";\nimport { composeEventHandlers } from \"@radix-ui/primitive\";\nimport { useComposedRefs } from \"@radix-ui/react-compose-refs\";\nimport { createContext, createContextScope } from \"@radix-ui/react-context\";\nimport { useId } from \"@radix-ui/react-id\";\nimport { useControllableState } from \"@radix-ui/react-use-controllable-state\";\nimport { DismissableLayer } from \"@radix-ui/react-dismissable-layer\";\nimport { FocusScope } from \"@radix-ui/react-focus-scope\";\nimport { Portal as PortalPrimitive } from \"@radix-ui/react-portal\";\nimport { Presence } from \"@radix-ui/react-presence\";\nimport { Primitive } from \"@radix-ui/react-primitive\";\nimport { useFocusGuards } from \"@radix-ui/react-focus-guards\";\nimport { RemoveScroll } from \"react-remove-scroll\";\nimport { hideOthers } from \"aria-hidden\";\nimport { createSlot } from \"@radix-ui/react-slot\";\nimport { Fragment, jsx, jsxs } from \"react/jsx-runtime\";\nvar DIALOG_NAME = \"Dialog\";\nvar [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\nvar [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);\nvar Dialog = props => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true\n  } = props;\n  const triggerRef = React.useRef(null);\n  const contentRef = React.useRef(null);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: DIALOG_NAME\n  });\n  return /* @__PURE__ */jsx(DialogProvider, {\n    scope: __scopeDialog,\n    triggerRef,\n    contentRef,\n    contentId: useId(),\n    titleId: useId(),\n    descriptionId: useId(),\n    open,\n    onOpenChange: setOpen,\n    onOpenToggle: React.useCallback(() => setOpen(prevOpen => !prevOpen), [setOpen]),\n    modal,\n    children\n  });\n};\nDialog.displayName = DIALOG_NAME;\nvar TRIGGER_NAME = \"DialogTrigger\";\nvar DialogTrigger = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...triggerProps\n  } = props;\n  const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n  const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    \"aria-haspopup\": \"dialog\",\n    \"aria-expanded\": context.open,\n    \"aria-controls\": context.contentId,\n    \"data-state\": getState(context.open),\n    ...triggerProps,\n    ref: composedTriggerRef,\n    onClick: composeEventHandlers(props.onClick, context.onOpenToggle)\n  });\n});\nDialogTrigger.displayName = TRIGGER_NAME;\nvar PORTAL_NAME = \"DialogPortal\";\nvar [PortalProvider, usePortalContext] = createDialogContext(PORTAL_NAME, {\n  forceMount: void 0\n});\nvar DialogPortal = props => {\n  const {\n    __scopeDialog,\n    forceMount,\n    children,\n    container\n  } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(PortalProvider, {\n    scope: __scopeDialog,\n    forceMount,\n    children: React.Children.map(children, child => /* @__PURE__ */jsx(Presence, {\n      present: forceMount || context.open,\n      children: /* @__PURE__ */jsx(PortalPrimitive, {\n        asChild: true,\n        container,\n        children: child\n      })\n    }))\n  });\n};\nDialogPortal.displayName = PORTAL_NAME;\nvar OVERLAY_NAME = \"DialogOverlay\";\nvar DialogOverlay = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n  return context.modal ? /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: /* @__PURE__ */jsx(DialogOverlayImpl, {\n      ...overlayProps,\n      ref: forwardedRef\n    })\n  }) : null;\n});\nDialogOverlay.displayName = OVERLAY_NAME;\nvar Slot = createSlot(\"DialogOverlay.RemoveScroll\");\nvar DialogOverlayImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...overlayProps\n  } = props;\n  const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n  return (\n    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n    // ie. when `Overlay` and `Content` are siblings\n    /* @__PURE__ */\n    jsx(RemoveScroll, {\n      as: Slot,\n      allowPinchZoom: true,\n      shards: [context.contentRef],\n      children: /* @__PURE__ */jsx(Primitive.div, {\n        \"data-state\": getState(context.open),\n        ...overlayProps,\n        ref: forwardedRef,\n        style: {\n          pointerEvents: \"auto\",\n          ...overlayProps.style\n        }\n      })\n    })\n  );\n});\nvar CONTENT_NAME = \"DialogContent\";\nvar DialogContent = React.forwardRef((props, forwardedRef) => {\n  const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n  const {\n    forceMount = portalContext.forceMount,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  return /* @__PURE__ */jsx(Presence, {\n    present: forceMount || context.open,\n    children: context.modal ? /* @__PURE__ */jsx(DialogContentModal, {\n      ...contentProps,\n      ref: forwardedRef\n    }) : /* @__PURE__ */jsx(DialogContentNonModal, {\n      ...contentProps,\n      ref: forwardedRef\n    })\n  });\n});\nDialogContent.displayName = CONTENT_NAME;\nvar DialogContentModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n  React.useEffect(() => {\n    const content = contentRef.current;\n    if (content) return hideOthers(content);\n  }, []);\n  return /* @__PURE__ */jsx(DialogContentImpl, {\n    ...props,\n    ref: composedRefs,\n    trapFocus: context.open,\n    disableOutsidePointerEvents: true,\n    onCloseAutoFocus: composeEventHandlers(props.onCloseAutoFocus, event => {\n      event.preventDefault();\n      context.triggerRef.current?.focus();\n    }),\n    onPointerDownOutside: composeEventHandlers(props.onPointerDownOutside, event => {\n      const originalEvent = event.detail.originalEvent;\n      const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n      const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n      if (isRightClick) event.preventDefault();\n    }),\n    onFocusOutside: composeEventHandlers(props.onFocusOutside, event => event.preventDefault())\n  });\n});\nvar DialogContentNonModal = React.forwardRef((props, forwardedRef) => {\n  const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n  const hasInteractedOutsideRef = React.useRef(false);\n  const hasPointerDownOutsideRef = React.useRef(false);\n  return /* @__PURE__ */jsx(DialogContentImpl, {\n    ...props,\n    ref: forwardedRef,\n    trapFocus: false,\n    disableOutsidePointerEvents: false,\n    onCloseAutoFocus: event => {\n      props.onCloseAutoFocus?.(event);\n      if (!event.defaultPrevented) {\n        if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n        event.preventDefault();\n      }\n      hasInteractedOutsideRef.current = false;\n      hasPointerDownOutsideRef.current = false;\n    },\n    onInteractOutside: event => {\n      props.onInteractOutside?.(event);\n      if (!event.defaultPrevented) {\n        hasInteractedOutsideRef.current = true;\n        if (event.detail.originalEvent.type === \"pointerdown\") {\n          hasPointerDownOutsideRef.current = true;\n        }\n      }\n      const target = event.target;\n      const targetIsTrigger = context.triggerRef.current?.contains(target);\n      if (targetIsTrigger) event.preventDefault();\n      if (event.detail.originalEvent.type === \"focusin\" && hasPointerDownOutsideRef.current) {\n        event.preventDefault();\n      }\n    }\n  });\n});\nvar DialogContentImpl = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    trapFocus,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    ...contentProps\n  } = props;\n  const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n  const contentRef = React.useRef(null);\n  const composedRefs = useComposedRefs(forwardedRef, contentRef);\n  useFocusGuards();\n  return /* @__PURE__ */jsxs(Fragment, {\n    children: [/* @__PURE__ */jsx(FocusScope, {\n      asChild: true,\n      loop: true,\n      trapped: trapFocus,\n      onMountAutoFocus: onOpenAutoFocus,\n      onUnmountAutoFocus: onCloseAutoFocus,\n      children: /* @__PURE__ */jsx(DismissableLayer, {\n        role: \"dialog\",\n        id: context.contentId,\n        \"aria-describedby\": context.descriptionId,\n        \"aria-labelledby\": context.titleId,\n        \"data-state\": getState(context.open),\n        ...contentProps,\n        ref: composedRefs,\n        onDismiss: () => context.onOpenChange(false)\n      })\n    }), /* @__PURE__ */jsxs(Fragment, {\n      children: [/* @__PURE__ */jsx(TitleWarning, {\n        titleId: context.titleId\n      }), /* @__PURE__ */jsx(DescriptionWarning, {\n        contentRef,\n        descriptionId: context.descriptionId\n      })]\n    })]\n  });\n});\nvar TITLE_NAME = \"DialogTitle\";\nvar DialogTitle = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...titleProps\n  } = props;\n  const context = useDialogContext(TITLE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.h2, {\n    id: context.titleId,\n    ...titleProps,\n    ref: forwardedRef\n  });\n});\nDialogTitle.displayName = TITLE_NAME;\nvar DESCRIPTION_NAME = \"DialogDescription\";\nvar DialogDescription = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...descriptionProps\n  } = props;\n  const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.p, {\n    id: context.descriptionId,\n    ...descriptionProps,\n    ref: forwardedRef\n  });\n});\nDialogDescription.displayName = DESCRIPTION_NAME;\nvar CLOSE_NAME = \"DialogClose\";\nvar DialogClose = React.forwardRef((props, forwardedRef) => {\n  const {\n    __scopeDialog,\n    ...closeProps\n  } = props;\n  const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n  return /* @__PURE__ */jsx(Primitive.button, {\n    type: \"button\",\n    ...closeProps,\n    ref: forwardedRef,\n    onClick: composeEventHandlers(props.onClick, () => context.onOpenChange(false))\n  });\n});\nDialogClose.displayName = CLOSE_NAME;\nfunction getState(open) {\n  return open ? \"open\" : \"closed\";\n}\nvar TITLE_WARNING_NAME = \"DialogTitleWarning\";\nvar [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: \"dialog\"\n});\nvar TitleWarning = ({\n  titleId\n}) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n  return null;\n};\nvar DESCRIPTION_WARNING_NAME = \"DialogDescriptionWarning\";\nvar DescriptionWarning = ({\n  contentRef,\n  descriptionId\n}) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute(\"aria-describedby\");\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n  return null;\n};\nvar Root = Dialog;\nvar Trigger = DialogTrigger;\nvar Portal = DialogPortal;\nvar Overlay = DialogOverlay;\nvar Content = DialogContent;\nvar Title = DialogTitle;\nvar Description = DialogDescription;\nvar Close = DialogClose;\nexport { Close, Content, Description, Dialog, DialogClose, DialogContent, DialogDescription, DialogOverlay, DialogPortal, DialogTitle, DialogTrigger, Overlay, Portal, Root, Title, Trigger, WarningProvider, createDialogScope };","map":{"version":3,"names":["React","composeEventHandlers","useComposedRefs","createContext","createContextScope","useId","useControllableState","DismissableLayer","FocusScope","Portal","PortalPrimitive","Presence","Primitive","useFocusGuards","RemoveScroll","hideOthers","createSlot","Fragment","jsx","jsxs","DIALOG_NAME","createDialogContext","createDialogScope","DialogProvider","useDialogContext","Dialog","props","__scopeDialog","children","open","openProp","defaultOpen","onOpenChange","modal","triggerRef","useRef","contentRef","setOpen","prop","defaultProp","onChange","caller","scope","contentId","titleId","descriptionId","onOpenToggle","useCallback","prevOpen","displayName","TRIGGER_NAME","DialogTrigger","forwardRef","forwardedRef","triggerProps","context","composedTriggerRef","button","type","getState","ref","onClick","PORTAL_NAME","PortalProvider","usePortalContext","forceMount","DialogPortal","container","Children","map","child","present","asChild","OVERLAY_NAME","DialogOverlay","portalContext","overlayProps","DialogOverlayImpl","Slot","as","allowPinchZoom","shards","div","style","pointerEvents","CONTENT_NAME","DialogContent","contentProps","DialogContentModal","DialogContentNonModal","composedRefs","useEffect","content","current","DialogContentImpl","trapFocus","disableOutsidePointerEvents","onCloseAutoFocus","event","preventDefault","focus","onPointerDownOutside","originalEvent","detail","ctrlLeftClick","ctrlKey","isRightClick","onFocusOutside","hasInteractedOutsideRef","hasPointerDownOutsideRef","defaultPrevented","onInteractOutside","target","targetIsTrigger","contains","onOpenAutoFocus","loop","trapped","onMountAutoFocus","onUnmountAutoFocus","role","id","onDismiss","TitleWarning","DescriptionWarning","TITLE_NAME","DialogTitle","titleProps","h2","DESCRIPTION_NAME","DialogDescription","descriptionProps","p","CLOSE_NAME","DialogClose","closeProps","TITLE_WARNING_NAME","WarningProvider","useWarningContext","contentName","titleName","docsSlug","titleWarningContext","MESSAGE","hasTitle","document","getElementById","console","error","DESCRIPTION_WARNING_NAME","descriptionWarningContext","describedById","getAttribute","hasDescription","warn","Root","Trigger","Overlay","Content","Title","Description","Close"],"sources":["C:\\Users\\ssk08\\OneDrive\\Desktop\\New folder\\port\\app\\frontend\\node_modules\\@radix-ui\\react-dialog\\src\\dialog.tsx"],"sourcesContent":["import * as React from 'react';\nimport { composeEventHandlers } from '@radix-ui/primitive';\nimport { useComposedRefs } from '@radix-ui/react-compose-refs';\nimport { createContext, createContextScope } from '@radix-ui/react-context';\nimport { useId } from '@radix-ui/react-id';\nimport { useControllableState } from '@radix-ui/react-use-controllable-state';\nimport { DismissableLayer } from '@radix-ui/react-dismissable-layer';\nimport { FocusScope } from '@radix-ui/react-focus-scope';\nimport { Portal as PortalPrimitive } from '@radix-ui/react-portal';\nimport { Presence } from '@radix-ui/react-presence';\nimport { Primitive } from '@radix-ui/react-primitive';\nimport { useFocusGuards } from '@radix-ui/react-focus-guards';\nimport { RemoveScroll } from 'react-remove-scroll';\nimport { hideOthers } from 'aria-hidden';\nimport { createSlot } from '@radix-ui/react-slot';\n\nimport type { Scope } from '@radix-ui/react-context';\n\n/* -------------------------------------------------------------------------------------------------\n * Dialog\n * -----------------------------------------------------------------------------------------------*/\n\nconst DIALOG_NAME = 'Dialog';\n\ntype ScopedProps<P> = P & { __scopeDialog?: Scope };\nconst [createDialogContext, createDialogScope] = createContextScope(DIALOG_NAME);\n\ntype DialogContextValue = {\n  triggerRef: React.RefObject<HTMLButtonElement | null>;\n  contentRef: React.RefObject<DialogContentElement | null>;\n  contentId: string;\n  titleId: string;\n  descriptionId: string;\n  open: boolean;\n  onOpenChange(open: boolean): void;\n  onOpenToggle(): void;\n  modal: boolean;\n};\n\nconst [DialogProvider, useDialogContext] = createDialogContext<DialogContextValue>(DIALOG_NAME);\n\ninterface DialogProps {\n  children?: React.ReactNode;\n  open?: boolean;\n  defaultOpen?: boolean;\n  onOpenChange?(open: boolean): void;\n  modal?: boolean;\n}\n\nconst Dialog: React.FC<DialogProps> = (props: ScopedProps<DialogProps>) => {\n  const {\n    __scopeDialog,\n    children,\n    open: openProp,\n    defaultOpen,\n    onOpenChange,\n    modal = true,\n  } = props;\n  const triggerRef = React.useRef<HTMLButtonElement>(null);\n  const contentRef = React.useRef<DialogContentElement>(null);\n  const [open, setOpen] = useControllableState({\n    prop: openProp,\n    defaultProp: defaultOpen ?? false,\n    onChange: onOpenChange,\n    caller: DIALOG_NAME,\n  });\n\n  return (\n    <DialogProvider\n      scope={__scopeDialog}\n      triggerRef={triggerRef}\n      contentRef={contentRef}\n      contentId={useId()}\n      titleId={useId()}\n      descriptionId={useId()}\n      open={open}\n      onOpenChange={setOpen}\n      onOpenToggle={React.useCallback(() => setOpen((prevOpen) => !prevOpen), [setOpen])}\n      modal={modal}\n    >\n      {children}\n    </DialogProvider>\n  );\n};\n\nDialog.displayName = DIALOG_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTrigger\n * -----------------------------------------------------------------------------------------------*/\n\nconst TRIGGER_NAME = 'DialogTrigger';\n\ntype DialogTriggerElement = React.ComponentRef<typeof Primitive.button>;\ntype PrimitiveButtonProps = React.ComponentPropsWithoutRef<typeof Primitive.button>;\ninterface DialogTriggerProps extends PrimitiveButtonProps {}\n\nconst DialogTrigger = React.forwardRef<DialogTriggerElement, DialogTriggerProps>(\n  (props: ScopedProps<DialogTriggerProps>, forwardedRef) => {\n    const { __scopeDialog, ...triggerProps } = props;\n    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);\n    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);\n    return (\n      <Primitive.button\n        type=\"button\"\n        aria-haspopup=\"dialog\"\n        aria-expanded={context.open}\n        aria-controls={context.contentId}\n        data-state={getState(context.open)}\n        {...triggerProps}\n        ref={composedTriggerRef}\n        onClick={composeEventHandlers(props.onClick, context.onOpenToggle)}\n      />\n    );\n  }\n);\n\nDialogTrigger.displayName = TRIGGER_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogPortal\n * -----------------------------------------------------------------------------------------------*/\n\nconst PORTAL_NAME = 'DialogPortal';\n\ntype PortalContextValue = { forceMount?: true };\nconst [PortalProvider, usePortalContext] = createDialogContext<PortalContextValue>(PORTAL_NAME, {\n  forceMount: undefined,\n});\n\ntype PortalProps = React.ComponentPropsWithoutRef<typeof PortalPrimitive>;\ninterface DialogPortalProps {\n  children?: React.ReactNode;\n  /**\n   * Specify a container element to portal the content into.\n   */\n  container?: PortalProps['container'];\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogPortal: React.FC<DialogPortalProps> = (props: ScopedProps<DialogPortalProps>) => {\n  const { __scopeDialog, forceMount, children, container } = props;\n  const context = useDialogContext(PORTAL_NAME, __scopeDialog);\n  return (\n    <PortalProvider scope={__scopeDialog} forceMount={forceMount}>\n      {React.Children.map(children, (child) => (\n        <Presence present={forceMount || context.open}>\n          <PortalPrimitive asChild container={container}>\n            {child}\n          </PortalPrimitive>\n        </Presence>\n      ))}\n    </PortalProvider>\n  );\n};\n\nDialogPortal.displayName = PORTAL_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogOverlay\n * -----------------------------------------------------------------------------------------------*/\n\nconst OVERLAY_NAME = 'DialogOverlay';\n\ntype DialogOverlayElement = DialogOverlayImplElement;\ninterface DialogOverlayProps extends DialogOverlayImplProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogOverlay = React.forwardRef<DialogOverlayElement, DialogOverlayProps>(\n  (props: ScopedProps<DialogOverlayProps>, forwardedRef) => {\n    const portalContext = usePortalContext(OVERLAY_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, props.__scopeDialog);\n    return context.modal ? (\n      <Presence present={forceMount || context.open}>\n        <DialogOverlayImpl {...overlayProps} ref={forwardedRef} />\n      </Presence>\n    ) : null;\n  }\n);\n\nDialogOverlay.displayName = OVERLAY_NAME;\n\ntype DialogOverlayImplElement = React.ComponentRef<typeof Primitive.div>;\ntype PrimitiveDivProps = React.ComponentPropsWithoutRef<typeof Primitive.div>;\ninterface DialogOverlayImplProps extends PrimitiveDivProps {}\n\nconst Slot = createSlot('DialogOverlay.RemoveScroll');\n\nconst DialogOverlayImpl = React.forwardRef<DialogOverlayImplElement, DialogOverlayImplProps>(\n  (props: ScopedProps<DialogOverlayImplProps>, forwardedRef) => {\n    const { __scopeDialog, ...overlayProps } = props;\n    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);\n    return (\n      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`\n      // ie. when `Overlay` and `Content` are siblings\n      <RemoveScroll as={Slot} allowPinchZoom shards={[context.contentRef]}>\n        <Primitive.div\n          data-state={getState(context.open)}\n          {...overlayProps}\n          ref={forwardedRef}\n          // We re-enable pointer-events prevented by `Dialog.Content` to allow scrolling the overlay.\n          style={{ pointerEvents: 'auto', ...overlayProps.style }}\n        />\n      </RemoveScroll>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogContent\n * -----------------------------------------------------------------------------------------------*/\n\nconst CONTENT_NAME = 'DialogContent';\n\ntype DialogContentElement = DialogContentTypeElement;\ninterface DialogContentProps extends DialogContentTypeProps {\n  /**\n   * Used to force mounting when more control is needed. Useful when\n   * controlling animation with React animation libraries.\n   */\n  forceMount?: true;\n}\n\nconst DialogContent = React.forwardRef<DialogContentElement, DialogContentProps>(\n  (props: ScopedProps<DialogContentProps>, forwardedRef) => {\n    const portalContext = usePortalContext(CONTENT_NAME, props.__scopeDialog);\n    const { forceMount = portalContext.forceMount, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    return (\n      <Presence present={forceMount || context.open}>\n        {context.modal ? (\n          <DialogContentModal {...contentProps} ref={forwardedRef} />\n        ) : (\n          <DialogContentNonModal {...contentProps} ref={forwardedRef} />\n        )}\n      </Presence>\n    );\n  }\n);\n\nDialogContent.displayName = CONTENT_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentTypeElement = DialogContentImplElement;\ninterface DialogContentTypeProps\n  extends Omit<DialogContentImplProps, 'trapFocus' | 'disableOutsidePointerEvents'> {}\n\nconst DialogContentModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);\n\n    // aria-hide everything except the content (better supported equivalent to setting aria-modal)\n    React.useEffect(() => {\n      const content = contentRef.current;\n      if (content) return hideOthers(content);\n    }, []);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={composedRefs}\n        // we make sure focus isn't trapped once `DialogContent` has been closed\n        // (closed !== unmounted when animating out)\n        trapFocus={context.open}\n        disableOutsidePointerEvents\n        onCloseAutoFocus={composeEventHandlers(props.onCloseAutoFocus, (event) => {\n          event.preventDefault();\n          context.triggerRef.current?.focus();\n        })}\n        onPointerDownOutside={composeEventHandlers(props.onPointerDownOutside, (event) => {\n          const originalEvent = event.detail.originalEvent;\n          const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;\n          const isRightClick = originalEvent.button === 2 || ctrlLeftClick;\n\n          // If the event is a right-click, we shouldn't close because\n          // it is effectively as if we right-clicked the `Overlay`.\n          if (isRightClick) event.preventDefault();\n        })}\n        // When focus is trapped, a `focusout` event may still happen.\n        // We make sure we don't trigger our `onDismiss` in such case.\n        onFocusOutside={composeEventHandlers(props.onFocusOutside, (event) =>\n          event.preventDefault()\n        )}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\nconst DialogContentNonModal = React.forwardRef<DialogContentTypeElement, DialogContentTypeProps>(\n  (props: ScopedProps<DialogContentTypeProps>, forwardedRef) => {\n    const context = useDialogContext(CONTENT_NAME, props.__scopeDialog);\n    const hasInteractedOutsideRef = React.useRef(false);\n    const hasPointerDownOutsideRef = React.useRef(false);\n\n    return (\n      <DialogContentImpl\n        {...props}\n        ref={forwardedRef}\n        trapFocus={false}\n        disableOutsidePointerEvents={false}\n        onCloseAutoFocus={(event) => {\n          props.onCloseAutoFocus?.(event);\n\n          if (!event.defaultPrevented) {\n            if (!hasInteractedOutsideRef.current) context.triggerRef.current?.focus();\n            // Always prevent auto focus because we either focus manually or want user agent focus\n            event.preventDefault();\n          }\n\n          hasInteractedOutsideRef.current = false;\n          hasPointerDownOutsideRef.current = false;\n        }}\n        onInteractOutside={(event) => {\n          props.onInteractOutside?.(event);\n\n          if (!event.defaultPrevented) {\n            hasInteractedOutsideRef.current = true;\n            if (event.detail.originalEvent.type === 'pointerdown') {\n              hasPointerDownOutsideRef.current = true;\n            }\n          }\n\n          // Prevent dismissing when clicking the trigger.\n          // As the trigger is already setup to close, without doing so would\n          // cause it to close and immediately open.\n          const target = event.target as HTMLElement;\n          const targetIsTrigger = context.triggerRef.current?.contains(target);\n          if (targetIsTrigger) event.preventDefault();\n\n          // On Safari if the trigger is inside a container with tabIndex={0}, when clicked\n          // we will get the pointer down outside event on the trigger, but then a subsequent\n          // focus outside event on the container, we ignore any focus outside event when we've\n          // already had a pointer down outside event.\n          if (event.detail.originalEvent.type === 'focusin' && hasPointerDownOutsideRef.current) {\n            event.preventDefault();\n          }\n        }}\n      />\n    );\n  }\n);\n\n/* -----------------------------------------------------------------------------------------------*/\n\ntype DialogContentImplElement = React.ComponentRef<typeof DismissableLayer>;\ntype DismissableLayerProps = React.ComponentPropsWithoutRef<typeof DismissableLayer>;\ntype FocusScopeProps = React.ComponentPropsWithoutRef<typeof FocusScope>;\ninterface DialogContentImplProps extends Omit<DismissableLayerProps, 'onDismiss'> {\n  /**\n   * When `true`, focus cannot escape the `Content` via keyboard,\n   * pointer, or a programmatic focus.\n   * @defaultValue false\n   */\n  trapFocus?: FocusScopeProps['trapped'];\n\n  /**\n   * Event handler called when auto-focusing on open.\n   * Can be prevented.\n   */\n  onOpenAutoFocus?: FocusScopeProps['onMountAutoFocus'];\n\n  /**\n   * Event handler called when auto-focusing on close.\n   * Can be prevented.\n   */\n  onCloseAutoFocus?: FocusScopeProps['onUnmountAutoFocus'];\n}\n\nconst DialogContentImpl = React.forwardRef<DialogContentImplElement, DialogContentImplProps>(\n  (props: ScopedProps<DialogContentImplProps>, forwardedRef) => {\n    const { __scopeDialog, trapFocus, onOpenAutoFocus, onCloseAutoFocus, ...contentProps } = props;\n    const context = useDialogContext(CONTENT_NAME, __scopeDialog);\n    const contentRef = React.useRef<HTMLDivElement>(null);\n    const composedRefs = useComposedRefs(forwardedRef, contentRef);\n\n    // Make sure the whole tree has focus guards as our `Dialog` will be\n    // the last element in the DOM (because of the `Portal`)\n    useFocusGuards();\n\n    return (\n      <>\n        <FocusScope\n          asChild\n          loop\n          trapped={trapFocus}\n          onMountAutoFocus={onOpenAutoFocus}\n          onUnmountAutoFocus={onCloseAutoFocus}\n        >\n          <DismissableLayer\n            role=\"dialog\"\n            id={context.contentId}\n            aria-describedby={context.descriptionId}\n            aria-labelledby={context.titleId}\n            data-state={getState(context.open)}\n            {...contentProps}\n            ref={composedRefs}\n            onDismiss={() => context.onOpenChange(false)}\n          />\n        </FocusScope>\n        {process.env.NODE_ENV !== 'production' && (\n          <>\n            <TitleWarning titleId={context.titleId} />\n            <DescriptionWarning contentRef={contentRef} descriptionId={context.descriptionId} />\n          </>\n        )}\n      </>\n    );\n  }\n);\n\n/* -------------------------------------------------------------------------------------------------\n * DialogTitle\n * -----------------------------------------------------------------------------------------------*/\n\nconst TITLE_NAME = 'DialogTitle';\n\ntype DialogTitleElement = React.ComponentRef<typeof Primitive.h2>;\ntype PrimitiveHeading2Props = React.ComponentPropsWithoutRef<typeof Primitive.h2>;\ninterface DialogTitleProps extends PrimitiveHeading2Props {}\n\nconst DialogTitle = React.forwardRef<DialogTitleElement, DialogTitleProps>(\n  (props: ScopedProps<DialogTitleProps>, forwardedRef) => {\n    const { __scopeDialog, ...titleProps } = props;\n    const context = useDialogContext(TITLE_NAME, __scopeDialog);\n    return <Primitive.h2 id={context.titleId} {...titleProps} ref={forwardedRef} />;\n  }\n);\n\nDialogTitle.displayName = TITLE_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogDescription\n * -----------------------------------------------------------------------------------------------*/\n\nconst DESCRIPTION_NAME = 'DialogDescription';\n\ntype DialogDescriptionElement = React.ComponentRef<typeof Primitive.p>;\ntype PrimitiveParagraphProps = React.ComponentPropsWithoutRef<typeof Primitive.p>;\ninterface DialogDescriptionProps extends PrimitiveParagraphProps {}\n\nconst DialogDescription = React.forwardRef<DialogDescriptionElement, DialogDescriptionProps>(\n  (props: ScopedProps<DialogDescriptionProps>, forwardedRef) => {\n    const { __scopeDialog, ...descriptionProps } = props;\n    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);\n    return <Primitive.p id={context.descriptionId} {...descriptionProps} ref={forwardedRef} />;\n  }\n);\n\nDialogDescription.displayName = DESCRIPTION_NAME;\n\n/* -------------------------------------------------------------------------------------------------\n * DialogClose\n * -----------------------------------------------------------------------------------------------*/\n\nconst CLOSE_NAME = 'DialogClose';\n\ntype DialogCloseElement = React.ComponentRef<typeof Primitive.button>;\ninterface DialogCloseProps extends PrimitiveButtonProps {}\n\nconst DialogClose = React.forwardRef<DialogCloseElement, DialogCloseProps>(\n  (props: ScopedProps<DialogCloseProps>, forwardedRef) => {\n    const { __scopeDialog, ...closeProps } = props;\n    const context = useDialogContext(CLOSE_NAME, __scopeDialog);\n    return (\n      <Primitive.button\n        type=\"button\"\n        {...closeProps}\n        ref={forwardedRef}\n        onClick={composeEventHandlers(props.onClick, () => context.onOpenChange(false))}\n      />\n    );\n  }\n);\n\nDialogClose.displayName = CLOSE_NAME;\n\n/* -----------------------------------------------------------------------------------------------*/\n\nfunction getState(open: boolean) {\n  return open ? 'open' : 'closed';\n}\n\nconst TITLE_WARNING_NAME = 'DialogTitleWarning';\n\nconst [WarningProvider, useWarningContext] = createContext(TITLE_WARNING_NAME, {\n  contentName: CONTENT_NAME,\n  titleName: TITLE_NAME,\n  docsSlug: 'dialog',\n});\n\ntype TitleWarningProps = { titleId?: string };\n\nconst TitleWarning: React.FC<TitleWarningProps> = ({ titleId }) => {\n  const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);\n\n  const MESSAGE = `\\`${titleWarningContext.contentName}\\` requires a \\`${titleWarningContext.titleName}\\` for the component to be accessible for screen reader users.\n\nIf you want to hide the \\`${titleWarningContext.titleName}\\`, you can wrap it with our VisuallyHidden component.\n\nFor more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;\n\n  React.useEffect(() => {\n    if (titleId) {\n      const hasTitle = document.getElementById(titleId);\n      if (!hasTitle) console.error(MESSAGE);\n    }\n  }, [MESSAGE, titleId]);\n\n  return null;\n};\n\nconst DESCRIPTION_WARNING_NAME = 'DialogDescriptionWarning';\n\ntype DescriptionWarningProps = {\n  contentRef: React.RefObject<DialogContentElement | null>;\n  descriptionId?: string;\n};\n\nconst DescriptionWarning: React.FC<DescriptionWarningProps> = ({ contentRef, descriptionId }) => {\n  const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);\n  const MESSAGE = `Warning: Missing \\`Description\\` or \\`aria-describedby={undefined}\\` for {${descriptionWarningContext.contentName}}.`;\n\n  React.useEffect(() => {\n    const describedById = contentRef.current?.getAttribute('aria-describedby');\n    // if we have an id and the user hasn't set aria-describedby={undefined}\n    if (descriptionId && describedById) {\n      const hasDescription = document.getElementById(descriptionId);\n      if (!hasDescription) console.warn(MESSAGE);\n    }\n  }, [MESSAGE, contentRef, descriptionId]);\n\n  return null;\n};\n\nconst Root = Dialog;\nconst Trigger = DialogTrigger;\nconst Portal = DialogPortal;\nconst Overlay = DialogOverlay;\nconst Content = DialogContent;\nconst Title = DialogTitle;\nconst Description = DialogDescription;\nconst Close = DialogClose;\n\nexport {\n  createDialogScope,\n  //\n  Dialog,\n  DialogTrigger,\n  DialogPortal,\n  DialogOverlay,\n  DialogContent,\n  DialogTitle,\n  DialogDescription,\n  DialogClose,\n  //\n  Root,\n  Trigger,\n  Portal,\n  Overlay,\n  Content,\n  Title,\n  Description,\n  Close,\n  //\n  WarningProvider,\n};\nexport type {\n  DialogProps,\n  DialogTriggerProps,\n  DialogPortalProps,\n  DialogOverlayProps,\n  DialogContentProps,\n  DialogTitleProps,\n  DialogDescriptionProps,\n  DialogCloseProps,\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}